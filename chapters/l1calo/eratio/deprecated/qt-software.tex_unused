%Intro/need for custom software
The software used in preliminary studies, \texttt{R3L1Sim}, simulates the planned
form of the trigger in the Phase-I upgrade. To be able to use this for performance
studies required for the Phase-II upgrade some modifications must be made.
The most significant of these is collecting information from individual calorimeter
cells in the region around any \egamma candidates identified by the simulated Phase-I
L1 trigger, referred to here as seeds. A framework for handling these clusters of
cells has been developed, designed
for ease of use in Phase-II performance studies.

%requirements of the software
The goal is to form a cluster of cells around each seed, containing all cells from
Layer 1 of the EM calorimeter within a given distance in $\eta$ and $\phi$. Clusters
were chosen to have a total width of $0.3$ in both $\eta$ and $\phi$. This size
should be suitable to contain all activity surrounding detected particles.

%Explain need for subclusters
Clusters are complicated by the changing geometry of the calorimeter, described
in Section \ref{sec:calorimeter}.
For algorithms to be able to access cells sequentially without explicit knowledge
of each cell's coordinates, the cluster must know the geometry of the cells in the
calorimeter region it occupies. This is easily achievable if a cluster is fully
contained within a single calorimeter region, but becomes difficult if a cluster
crosses a region boundary.

%explain subclusters
The solution employed here is to split each cluster into
subclusters, where each subcluster covers the extent of the cluster contained by
a single calorimeter region. For instance, a cluster that falls towards the edge of
the barrel might have two subclusters, one in the barrel region and one in the
barrel-endcap transition region. Individual cells can then be accessed by indexing
the subclusters with a coordinate system based on distance from the centre of the
cluster.

%implementation/class structure
The cluster structure described above is implemented through a collection of classes.
\texttt{Cluster}, \texttt{SubCluster}, and \texttt{Cell} classes contain the core
mechanics including constructing the cluster from a seed location, constructing
appropriate subclusters, storing cell energies and coordinates if they are within
cluster bounds, and indexing and locating cells. Additional classes are used to
help with some of the more complicated tasks; Figure \ref{fig:classes}
shows the classes and functions used, and the relationships between them.

\begin{figure}
  \centering
  \includegraphics[width=.9\textwidth]{\resource{class_diagram.pdf}}
  \caption{
    Classes, functions, and datasets used in the code, and the relationships between them.
    NtupleDumper represents the (modified) \texttt{R3L1Sim} software.
  }
    
  \label{fig:classes}
\end{figure}

%output to ROOT file.
To access cell cluster information for trigger analysis, the cluster classes need
to be output to the ROOT \cite{rademakers2019} %TODO move citation if ROOT mentioned earlier
file generated by \texttt{R3L1Sim}. Initially this was done by directly saving the
\texttt{Cluster} class to the ROOT file, by providing dictionaries for each of
the defined classes to enable the interpreter to interact with them. This worked
at first when executed locally on test data but caused issues when run on the Grid, %TODO possible footnote explaining grid, cite LHC..Grid?
which is necessary to be able to process the large amounts of data required for the
study.

After a large amount of troubleshooting, no cause could be found for these issues. This
was solved by taking an alternative approach to saving the data. The class structure
can be decomposed to a set of arrays (STL vectors in C++)
containing all of the information associated with a cluster, its subclusters, and all
contained cells. The classes have the capability to output this decomposed information,
and also to be reconstructed from it.

%summary
Integrating these classes into \texttt{R3L1Sim}, and adding a few lines of code to the
event loop to create and save clusters, provides the information needed for Phase-II
studies with Layer-1 strip information. In future this code will likely be expanded to
include more calorimeter layers.

%What are the key elements of the final software (NtupleDumper modification)?

% - Class Structure to store information on Clusters and Cells v/
% - Subclustering to split clusters across multiple regions v/
% - Converting class members to/from vectors of information to output in ROOT v/
% - Integer cell coordinates spanning all subclusters v/

%What were the key steps/learning points throughout the process?

% - MAIN ISSUE: grid problems with initial form of algorithm
%   - Couldn't output classes to ROOT file (even after setting up dictionaries etc.)
%   - This motivated the vectors approach
